generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Clientes {
  id_cliente        Int      @id @default(autoincrement()) @map("id_cliente")
  nombre_cliente    String
  apellido_cliente  String
  tipo_documento    String
  numero_documento  String
  direccion_cliente String
  correo_cliente    String
  id_usuario        Int
  Usuarios          Usuarios @relation(fields: [id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction, map: "id_usuario")
}

model Configuraciones_Firmas {
  id_config   Int      @id(map: "id_config")
  ruta        String
  certificado String
  contrasena  String
  metodo      String
  firma       String
  id_usuario  Int
  Usuarios    Usuarios @relation(fields: [id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction, map: "id_usuario")
}

model Documentos_XML {
  id_documento         Int                @id(map: "id_documento")
  tipo_documento       String
  numero_documento     String
  fecha_emision        DateTime           @db.Date
  valor_total          Decimal[]          @db.Decimal(15, 2)
  impuestos            Decimal[]          @db.Decimal(15, 2)
  esstado_dian         String
  codigo_dian          String
  mensaje_dian         String
  fecha_respuesta_dian DateTime           @db.Timestamp(6)
  cufe                 String
  cude                 String
  xml_archivo          String
  pdf_archivo          Bytes
  id_usuario           Int
  Usuarios             Usuarios           @relation(fields: [id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction, map: "id_usuario")
  Eventos              Eventos[]
  Producto_Factura     Producto_Factura[]
}

model Eventos {
  id_evento      Int            @id(map: "id_evento")
  tipo_evento    String
  fecha_hora     DateTime       @db.Timestamp(6)
  descripcion    String
  resultado      String
  id_documento   Int
  id_usuario     Int
  Documentos_XML Documentos_XML @relation(fields: [id_documento], references: [id_documento], onDelete: NoAction, onUpdate: NoAction, map: "id_documento")
  Usuarios       Usuarios       @relation(fields: [id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction, map: "id_usuario")
}

model Producto_Factura {
  id_producto     Int             @id(map: "id_producto")
  descripcion     String?
  cantidad        Int?
  precio_unitario Decimal[]       @db.Decimal(15, 2)
  iva             Decimal[]       @db.Decimal(5, 2)
  total           Decimal[]       @db.Decimal(15, 2)
  id_documento    Int?
  Documentos_XML  Documentos_XML? @relation(fields: [id_documento], references: [id_documento], onDelete: NoAction, onUpdate: NoAction, map: "id_documento")
}

model Usuarios {
  id_usuario                   Int                      @id @default(autoincrement())
  nombre_usuario               String
  rol_usuario                  String?
  contrasena_usuario           String
  nit_empresa                  String
  correo_contacto              String                   @unique 
  prefijo_numeracion           Int?
  num_inicial                  Int?
  num_final                    Int?
  certificado_firma            String?
  contrasena_certificado       String?
  token_api                    String?
  fecha_expiracion_certificado DateTime?
  Clientes                     Clientes[]
  Configuraciones_Firmas       Configuraciones_Firmas[]
  Documentos_XML               Documentos_XML[]
  Eventos                      Eventos[]
  PasswordResetTokens          PasswordResetToken[]
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int      @map("id_usuario") // FK hacia Usuarios
  usuario   Usuarios @relation(fields: [userId], references: [id_usuario])
  expiresAt DateTime
  createdAt DateTime @default(now())
}
